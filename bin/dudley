#!/usr/bin/env ruby

require File.expand_path(File.dirname(__FILE__) + '/../lib/dudley')

module Dudley
  OptionParser.new do |opts|
    opts.banner = "Usage: dudley [options]"

    opts.on('-d', '--debug', 'Run with debug message.') do
      Config[:debug] = true
    end

    opts.on('-h', '--help', 'Show this message.') do
      puts opts
      exit
    end
  end.parse!

  begin
    s = Config[:server]

    # If no server configuration exists, die horribly with a ridiculous error
    # message... Just kidding, exit gracefully and explain why :)
    unless s
      log.error "No server configuration was found. Please check your " +
        "configuration file and try again."
      exit 1
    end

    bot = IRC.new(s[:nick], s[:host], s[:port], s[:realname])

    # When the end of the message of the day for the server has been reached,
    # connect to the channel supplied in the config file.
    #
    # If the server has no message of the day, this callback is not actually
    # called. Make note of this. We may need to find a better callback.
    IRCEvent.add_callback('endofmotd') do |event|
      log.info "Joined server #{Config[:server][:host]}."
      bot.add_channel(Config[:server][:channel])
    end

    IRCEvent.add_callback('join') do |event|
      log.info "Joined channel #{event.channel}."
    end

    # IRC channels receive private messages every time someone speaks in that
    # channel. Here, we're hooking into that fact to parse all messages that
    # flow through the current channel.
    IRCEvent.add_callback('privmsg') do |event|
      if event.channel == Config[:server][:channel]
        if event.message.start_with?('!')
          log.debug "Received command: #{event.message}"

          begin
            message = Command.execute(event.message)
            log.debug "Command executed successfully. Result: #{message}"
          rescue Exception => e
            message = e.message
            log.debug "Command produced an error. Message: #{message}"
          end

          bot.send_message(event.channel, message)
        end
      end
    end

    # Connect to the server
    log.info "Attempting to connect to #{s[:host]}:#{s[:port]}..."
    bot.connect
  rescue SystemExit, Interrupt
    # Catch ctrl + c exits. Doesn't actually run at the moment because of the
    # argument error that Ruby-IRC throws >_>
    log.info "Interrupted. Sending quit message."
    bot.send_quit
  rescue ArgumentError => e
    # For some reason, Ruby-IRC sends an argument error when it exits. This
    # catches it and exits gracefully.

    log.info "Sending quit message."
    bot.send_quit
  rescue Errno::ECONNREFUSED => e
    log.error e.message
    exit 1
  end
end
